<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Epilogue:wght@300;400;600;700&display=swap"
      rel="stylesheet"
    />
    <title>Wallet</title>
    <style>
     * {
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}
    body {
        position: relative;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        align-items: center;
        justify-content: center;
        background: linear-gradient(#60d3e4, #5fd4ad);
        background-attachment: fixed;
        background-repeat: no-repeat;
      }
    header {
        background-color: #5fd4ad;
        color: white;
        padding: 10px;
    }
    .center {
        width: 100%;
        display: flex;
        align-items: start;
        justify-content: start;
        margin: 10px 10px;
    }
      #toggle {
        display: none;
      }
      .switch {
        width: fit-content;
        height: fit-content;
        padding: 5px;
        background: linear-gradient(rgb(211, 210, 212), rgb(245, 244, 246));
        box-shadow: inset 0px 2px 2px 0px rgba(0, 0, 0, 0.2);
        border-radius: 2mm;
        display: flex;
        perspective: 300px;
        position: relative;
      }
      .mode { 
        width: 100px;
        height: 60px;
        background: linear-gradient(rgb(72, 160, 219), rgb(40, 235, 225));
        display: flex;
        align-items: center;
        justify-content: center;
        transition: 0.25s transform;
      }
      .mode:nth-child(1) {
        border-radius: 2mm 0 0 2mm;
        transform-origin: right;
      }
      .mode:nth-child(2) {
        border-radius: 0 2mm 2mm 0;
        transform-origin: left;
      }
      .text {
        font-family: poppins;
        font-size: 27px;
        font-weight: 800;
        color: transparent;
        background-color: #000000;
        background-clip: text;
        text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);
      }
      #toggle:not(:checked) ~ .switch .mode:nth-child(1) {
        transform: rotateY(50deg);
        background: rgb(238, 237, 239);                                                                                                                                                             
        box-shadow: -10px 5px 20px rgba(0, 0, 0, 0.2);
      }
      #toggle:checked ~ .switch .mode:nth-child(2) {
        transform: rotateY(-50deg);
        background: rgb(238, 237, 239);
        box-shadow: 10px 5px 20px rgba(0, 0, 0, 0.2);
      }
      #toggle:not(:checked) ~ .switch .mode:nth-child(1) .text {
        background-color: #10476e;
      }
      #toggle:checked ~ .switch .mode:nth-child(2) .text {
        background-color: #10476e;
      }
      .indicator {
        position: absolute;
        height: 52px;
        width: 0;
        background: linear-gradient(
          to right,
          rgb(153, 152, 153),
          #4ac395
        );
        top: 50%;
        z-index: -1;
        transition: 0.25s;
      }
      .indicator.left {
        left: 5px;
        transform: translate(0, -50%) rotateY(-65deg);
        transform-origin: left;
      }
      .indicator.right {
        right: 5px;
        transform: translate(0, -50%) rotateY(65deg);
        transform-origin: right;
      }
      #toggle:not(:checked) ~ .switch .indicator.left {
        width: 95px;
      }
      #toggle:checked ~ .switch .indicator.right {
        width: 95px;
      }
      .nav-container {
      display: flex;
      justify-content: flex-end;
      gap: .5rem;
      margin-top: -85px;
      margin-right: 30px;
    }
    .nav-btn {
      background-color: white;
      color: #5fd4ad;
      border: none;
      padding: 0.5rem 1rem;
      font-weight: bold;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .nav-btn:hover {
      background-color: #e6f4ea;
    }

    .logout {
      background-color: #05847d;
      color: white;
    }

    .logout:hover {
      background: color #222;
    }

      .container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: 30px auto 0;
        padding: 30px;
        width: 100%;
        box-sizing: border-box;
        gap: 20px;
      }

      .left-container,
      .right-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      .budget-container,
      .transactions-container,
      .savings-container,
      .debts-container {
        border-radius: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        border: 1px solid rgb(255, 255, 255);
        padding: 15px;
        background-color: #ffff;
      }

      h1 {
        text-align: center;
        font-size: 18px;
      }

      h2,
      h3 {
        text-align: center;
        font-size: 16px;
      }

      label {
        display: block;
        margin: 8px 0 4px;
        font-size: 14px;
      }

      input[type='number'],
      input[type='text'],
      textarea {
        padding: 8px;
        width: 100%;
        font-size: 14px;
        border-radius: 4px;
        border: 1px solid #ddd;
        margin-bottom: 8px;
      }

      button {
        padding: 8px 16px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
      }

      button:hover {
        background-color: #45a049;
      }

      .result,
      .transactions,
      .savings,
      .debts {
        margin-top: 10px;
        text-align: center;
      }

      .transaction-list,
      .debt-list {
        margin-top: 10px;
        text-align: left;
      }

      .transaction-item,
      .debt-item {
        background-color: #f9f9f9;
        margin: 6px 0;
        padding: 8px;
        border-radius: 4px;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.1);
        font-size: 14px;
      }

      .progress-bar-container {
        margin-top: 8px;
        background-color: #ddd;
        height: 16px;
        width: 100%;
        border-radius: 8px;
      }

      .progress-bar {
        background-color: #4caf50;
        height: 100%;
        border-radius: 8px;
        transition: width 0.5s ease-in-out;
      }

      a {
        color: white;
        text-decoration: none;
      }
      .text-container {
    border: 5px white;
    background-color: linear-gradient(to bottom, rgb(72, 160,219), #5fd4ad);;;
    padding: 2px;
    border-radius: 50px;
    width: 70%;
    margin: 50px auto 0 auto;
    text-align: center;
    font-size: 20px;
    color: #000000;
    letter-spacing: 2px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
       
    
    }

    .outside-heading {
    margin-top: 20px; /* Adjust to your liking */
    text-align: center;  /* Center the heading */
    font-size: 40px;  /* Adjust the font size */
    }

    
    .mission-vision {
    display: flex;
    justify-content: center;
    gap: 50px; 
    margin-top: 50px;
    }

    .mission, .vision {
    width: 800px; 
    padding: 60px;
    border-radius: 6px;
    border:50px 50% #ffffff;
    text-align: center;
    background-color:linear-gradient(to bottom, rgb(72, 160,219), #5fd4ad);;
    margin-top: 30px;
    }

/* Mission Border */
    .mission {
    border: 50px 50% #ffffff; /* Border for the Mission */
    border-radius: 50px; /* Rounded corners for the Mission */
    background-color: linear-gradient(to bottom, rgb(72, 160,219), #5fd4ad);;;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);   
    }

    .mission h3 {
    font-size: 50px;
    font-family: 'Epilogue', sans-serif;
    font-weight: bold;
    color: #000000;
    margin-bottom: 20px;
    letter-spacing: 5px;
    
    }   


    .mission p {
    font-size: 20px;
    font-family: 'Epilogue', sans-serif;
    color: #ffffff;
    line-height: 1.6;
    font-style: italic;
    }

/* Vision Border */
    .vision {
    border: 5px 10% #ffffff; /* Border for the Vision */
    border-radius: 50px; /* Rounded corners for the Vision */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);   
    }

    .vision h3 {
    font-size: 50px;
    font-family: 'Epilogue', sans-serif;
    font-weight: bold;
    color: #000000;
    margin-bottom: 20px;
    letter-spacing: 5px;
    }

    .vision p {
    font-size: 20px;
    font-family: 'Epilogue', sans-serif;
    color: #ffffff;
    line-height: 1.6;
    font-style: italic;

    }
    .our-story {
  width: 100%;                   
  margin: 50px auto;   
  max-width: 900px; 
  padding: 50px;           
  border: 50px 50% #ffffff;
  border-width: 5px;
  border-radius: 50px;
  background-color: linear-gradient(to bottom, rgb(72, 160,219), #5fd4ad);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);   /* Optional shadow for depth */
  text-align: center;
    }


    .our-story h2 {
  font-family: 'Epilogue', serif;
  font-size: 30px;
  margin-bottom: 30px;
  color: rgb(236, 243, 243);
  letter-spacing: 5px;
    }

    .our-story p {
  font-size: 20px;
  line-height: 150%;
  font-family: 'Epilogue', sans-serif;
  font-style: italic;
    }
.team-intro {
  margin-top: 20px;
  font-size: 50px;
  color: #ffffff;
  text-align: center;
  border: #000000;
  border-radius: 20px;
}

.team-description {
  text-align: center;
  font-size: 20px;
  margin-bottom: 30px;
  color: #333;
}

.team-row {
  display: block;
  justify-content: space-between  ;
  gap: 100px; /* Ensure the gap is similar between team members */
  padding: 50px;
  margin: 20px;
  width: 100%;

}

.team-member {
  text-align: center;
  width: 100%;  /* Set width for additional images, same as team members */
  padding: 100px;
  border: 5px solid rgb(72, 160, 219); /* Border around images */
  border-radius: 20px;
  background-color: rgb(72, 160, 219);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  animation: flipIn 0.6s ease-in-out;
  animation-delay: 0.2s;
  animation-fill-mode: both;

}

.team-member img {
  width: 80%;    /* Ensure the image takes full width of the container */
  height: auto;
  border-radius: 10px;
}

.team-member p {
  margin-top: 100px;
  font-weight: bold;
  color: #333;
  font-size: 25px;
  font-family: 'Epilogue';
}

/* Additional images section */
.additional-image-container {
  display: flex;
  justify-content: center;  /* Ensures images align properly */
  gap: 40px;  /* Space between images */
  margin-top: 30px;
  flex-wrap: wrap;
}

.additional-image-item {
  text-align: center;
  width: 30%;  /* Set width for additional images, same as team members */
  padding: 10px;
  border: 2px solid rgb(72, 160, 219); /* Border around images */
  border-radius: 20px;
  background-color: rgb(72, 160, 219);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.additional-image-item img {
  width: 60%;  /* Ensure the image takes full width of its container */
  height: auto;
  border-radius: 10px;
}

.additional-image-item p {
  margin-top: 40px;
  font-weight: bold;
  color: #333;
  font-size: 30px;
}
.additional-image-item {
  opacity: 0;
  transform: translateY(50px); /* Start position below */
  animation: fadeInUp 1s forwards;
  animation-delay: 0.5s; /* Delay for each image */
}
@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(50px); /* Start below */
  }
  100% {
    opacity: 1;
    transform: translateY(0); /* End at normal position */
  }
}

/* Trigger the animation when in view */
.additional-image-item.in-view {
  animation: fadeInUp 1s forwards;
}


.team-row, .additional-team-row {
  display: flex;
  justify-content: center;
  gap: 30px;
  padding: 20px;
  flex-wrap: wrap;
}

.team-member {
  text-align: center;
  max-width: 200px;
}

.team-member img {
  width: 100%;
  height: auto;
  border-radius: 10px;
  border: 3px solid #ccc;
}

.team-member p {
  margin-top: 10px;
  font-weight: bold;
}

.team-button {
  padding: 12px 24px;
  font-size: 16px;
  font-family: 'Epilogue', sans-serif;
  color: #fff;
  border: none;
  border-radius: 8px;
  background: linear-gradient(to bottom, #48a0db, #5fd4ad);
  cursor: pointer;
  transition: background 0.3s ease;
}

.team-button:hover {
  background-color: linear-gradient(to bottom, rgb(72, 160,219), #5fd4ad);
}
@keyframes fadeSlideUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.mission {
  animation-delay: 0.3s;
}

.vision {
  animation-delay: 0.6s;
}
.our-story {
  animation: fadeSlideUp 1s ease forwards;
  opacity: 0;
  animation-delay: 0.9s; /* Optional delay */
}

@keyframes scaleFadeIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
.our-story {
  animation: scaleFadeIn 1s ease forwards;
  opacity: 0;
  animation-delay: 0.8s; /* optional */
}
@keyframes flipIn {
  from {
    transform: rotateY(90deg);
    opacity: 0;
  }
  to {
    transform: rotateY(0deg);
    opacity: 1;
  }
}
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
footer {
  background-color: #5fd4ad;
  color: rgb(0, 0, 0);
  text-align: center;
  padding: 20px;
  font-size: 18px;
  border-bottom-left-radius: 20px;
  border-bottom-right-radius: 20px;
}
    </style>
  </head>
  <body>
   <header>
  <div class="center">
    <input type="checkbox" name="toggle" id="toggle" />
    <label for="toggle" class="switch">
      <div class="mode">
        <div class="text">ctrl</div>
      </div>
      <div class="mode">
        <div class="text">save</div>
      </div>
      <div class="indicator left"></div>
      <div class="indicator right"></div>
    </label>
  </div>
  </header>

    <div class="nav-container">
      <button onclick="goHome()" class="nav-btn">Home</button>
      <button onclick="goStats()" class="nav-btn">Stats</button>
      <button onclick="goCalendar()" class="nav-btn">Calendar</button>
      <button onclick="goWallet()" class="nav-btn">Wallet</button>
      <button onclick="logOut()" class="nav-btn logout">Logout</button>
    </div>

    <div class="container">
      <!-- Left Container for Budget and Transactions -->
      <div class="left-container">
        <div class="budget-container">
          <h1>Budget Planner</h1>
          <label for="monthlyBudget">Enter your monthly budget:</label>
          <input type="number" id="monthlyBudget" placeholder="Enter amount" />
          <button onclick="initializeBudget()">Set Budget</button>

          <div class="result" id="result"></div>
          <h2>Record a Transaction</h2>
          <label for="transactionName">Transaction Name:</label>
          <input type="text" id="transactionName" placeholder="Transaction name" />
          <label for="transactionCost">Cost (₱):</label>
          <input type="number" id="transactionCost" placeholder="Transaction cost" />
          <label for="transactionDescription">Description:</label>
          <textarea id="transactionDescription" placeholder="Short description"></textarea>
          <button onclick="addTransaction()">Add Transaction</button>

          <div class="transactions">
            <h3>Transaction List</h3>
            <div class="transaction-list" id="transactionList"></div>
          </div>
        </div>
      </div>

      <!-- Right Container for Savings and Debts -->
      <div class="right-container">
        <div class="savings-container">
          <h2>Set a Savings Goal</h2>
          <label for="savingsGoalAmount">Savings Goal (₱):</label>
          <input type="number" id="savingsGoalAmount" placeholder="Enter savings goal amount" />
          <label for="savingsContribution">Contribution (₱):</label>
          <input type="number" id="savingsContribution" placeholder="Enter savings contribution" />
          <button onclick="addSavings()">Add Savings Contribution</button>

          <div class="savings">
            <h3>Savings Progress</h3>
            <p>Target Savings: ₱<span id="savingsGoalDisplay">0</span></p>
            <p>Saved: ₱<span id="savingsSaved">0</span></p>
            <div class="progress-bar-container">
              <div id="progressBar" class="progress-bar" style="width: 0%"></div>
            </div>
          </div>
        </div>

        <div class="debts-container">
          <h2>Record a Debt</h2>
          <label for="debtName">Debt Name:</label>
          <input type="text" id="debtName" placeholder="Debt name" />
          <label for="debtAmount">Principal Amount (₱):</label>
          <input type="number" id="debtAmount" placeholder="Debt principal amount" />
          <label for="debtInterest">Interest Rate (%):</label>
          <input type="number" id="debtInterest" placeholder="Interest rate" />
          <label for="debtDueDate">Due Date:</label>
          <input type="date" id="debtDueDate" />
          <button onclick="addDebt()">Add Debt</button>

          <div class="debts">
            <h3>Debts & Liabilities</h3>
            <div class="debt-list" id="debtList"></div>
          </div>
        </div>
      </div>
    </div>

     <footer>
  <div class="text-container">
    <h2 class="outside-heading">About us</h2>
    <p>We started with a simple mission: to make personal finance accessible 
        for everyone. Specifically, For Students who struggles to track their monthly Allowance, We struggle to save up for things we want.
        <br> </p>
    <section>
    </section>
  </div>.
<div class="mission-vision">
    <div class="mission">
      <h3>Mission</h3>
      <p>Our mission is to help you take control of your financial future. Whether you're saving for a big goal or just trying to keep track of your daily expenses, we provide the tools you need to make informed decisions and achieve financial stability.</p>
    </div>
    <div class="vision">
      <h3>Vision</h3>
      <p>We believe that everyone should have the ability to manage their finances effortlessly. By combining simplicity with powerful tracking features, we hope to make financial management accessible for everyone.</p>
    </div>
  </div>
<section class="our-story">
    <h2>Our Story</h2>
    <p>
      ctrl save started with a simple idea: to make personal finance intuitive, accessible, and empowering. What began as a passion project quickly grew into a full platform that helps users take control of their savings journey with confidence and clarity.
    </p>
  </section>
  <h3 class="team-intro">Meet our team</h3>
  <p class="team-description">A passionate group committed to building meaningful experiences.</p>

<div class="team-row">
  <div class="team-member">
    <img src="/DRE.jpg" alt="Team Member 1">
    <p>Andrei</p>
      <p>Leader/Full Stack</p>
      <button class="team-button">Portfolio</button>
  </div>
  <div class="team-member">
    <img src="/EXE.jpg" alt="Team Member 2">
    <p>Exequel</p>
      <p>Backend <br> Developer</p>
      <button class="team-button">Portfolio</button>
  </div>
  <div class="team-member">
    <img src="/RAF.JPG" alt="Team Member 3">
    <p>Rafael Jr.</p>
      <p>Backend Developer</p>
      <button class="team-button">Portfolio</button>
  </div>
  <div class="additional-image-container">
  <div class="additional-image-item">
    <img src="/GEN.jpg" alt="Image 1">
    <p>Genelyn</p>
      <p>Frontend Developer</p>
      <button class="team-button">Portfolio</button>
</div>
  <div class="additional-image-item">
    <img src="/LEX.jpg" alt="Image 2">
    <p>Alexa</p>
      <p>Frontend Developer</p>
      <button class="team-button">Portfolio</button>

  </div>

</div>

</div>
  <p>&copy; 2025 Financial Dashboard. All rights reserved.</p>
</footer>

    <script>
      let transactions = [];
      let debts = [];
      let savingsGoal = 0;
      let savingsSaved = 0;
      let monthlyBudget = 0;
      let weeklyBudget = 0;
      let dailyBudget = 0;
      let totalBudget = 0;

      function formatCurrency(amount) {
        return amount.toLocaleString('en-PH', {
          style: 'currency',
          currency: 'PHP',
        });
      }

      function initializeBudget() {
        monthlyBudget = parseFloat(document.getElementById("monthlyBudget").value);

        if (isNaN(monthlyBudget) || monthlyBudget <= 0) {
          alert("Please enter a valid budget amount.");
          return;
        }

        weeklyBudget = (monthlyBudget / 4).toFixed(2);
        dailyBudget = (monthlyBudget / 30).toFixed(2);
        totalBudget = monthlyBudget;

        fetch('/api/budget', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ monthlyBudget, weeklyBudget, dailyBudget }),
        })
          .then((res) => res.json())
          .then((data) => {
            console.log('Budget set:', data);
            updateBudgetDisplay();
          })
          .catch((err) => console.error('Error:', err));
      }

      function addTransaction() {
        const name = document.getElementById("transactionName").value;
        const cost = parseFloat(document.getElementById("transactionCost").value);
        const description = document.getElementById("transactionDescription").value;
        const currentDate = new Date();

        if (!name || isNaN(cost) || cost <= 0 || !description) {
          alert("Please fill in all fields with valid values.");
          return;
        }

        const dateTime = currentDate.toLocaleString();
        const transaction = { name, cost, description, dateTime };

        fetch('/api/transaction', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(transaction),
        })
          .then((res) => res.json())
          .then((data) => {
            console.log('Transaction added:', data);
            transactions.push(transaction);
            totalBudget -= cost;
            updateBudgetDisplay();
            displayTransactions();

            document.getElementById("transactionName").value = "";
            document.getElementById("transactionCost").value = "";
            document.getElementById("transactionDescription").value = "";
          })
          .catch((err) => console.error('Error:', err));
      }

      function displayTransactions() {
        const transactionListDiv = document.getElementById("transactionList");
        transactionListDiv.innerHTML = "";

        if (transactions.length === 0) {
          transactionListDiv.innerHTML = "<p>No transactions recorded yet.</p>";
          return;
        }

        transactions.forEach((transaction) => {
          const item = document.createElement("div");
          item.classList.add("transaction-item");
          item.innerHTML = 
            `<div>
              <p><strong>${transaction.name}</strong> - ${formatCurrency(transaction.cost)}</p>
              <p>${transaction.description}</p>
              <p><small>Recorded on: ${transaction.dateTime}</small></p>
            </div>`;
          transactionListDiv.appendChild(item);
        });
      }

      
     
      function loadTransactions() {
  fetch('/api/transaction')
    .then(res => res.json())
    .then(data => {
      console.log("Fetched data:", data); // 🔍 LOG THIS

      if (data.success && Array.isArray(data.transactions)) {
        transactions = data.transactions.map(t => ({
          name: t.name,
          cost: t.cost,
          description: t.description,
          dateTime: new Date(t.date_time).toLocaleString()
        }));
        displayTransactions();
      } else {
        console.error("Invalid response format or no transactions.");
      }
    })
    .catch(err => {
      console.error("Error loading transactions:", err);
    });
}

window.addEventListener('DOMContentLoaded', () => {
  loadBudget();
  loadTransactions();
  loadDebts(); // 👈 ADD THIS
});

  function loadBudget() {
    fetch('/api/budget')
      .then(res => res.json())
      .then(data => {
        if (data.monthly_budget) {
          monthlyBudget = data.monthly_budget;
          weeklyBudget = data.weekly_budget;
          dailyBudget = data.daily_budget;
          totalBudget = data.monthly_budget;
          updateBudgetDisplay();
        }
      })
      .catch(err => {
        console.error('Failed to load budget:', err);
      });
  }

      function updateBudgetDisplay() {
        document.getElementById("result").innerHTML = 
          `<div>
            <p>Monthly Budget: ${formatCurrency(monthlyBudget)}</p>
            <p>Weekly Budget: ${formatCurrency(weeklyBudget)}</p>
            <p>Daily Budget: ${formatCurrency(dailyBudget)}</p>
            <p>Total Budget Remaining: ${formatCurrency(totalBudget)}</p>
          </div>`;
      }

      function addDebt() {
  const name = document.getElementById("debtName").value;
  const amount = parseFloat(document.getElementById("debtAmount").value);
  const interest = parseFloat(document.getElementById("debtInterest").value);
  const dueDate = document.getElementById("debtDueDate").value;

  if (!name || isNaN(amount) || isNaN(interest) || !dueDate) {
    alert("Please fill in all debt fields with valid values.");
    return;
  }

  const debt = { name, amount, interest, dueDate };

  fetch('/api/debt', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(debt),
  })
    .then((res) => res.json())
    .then((data) => {
      console.log('Debt added:', data);
      debts.push({
        name,
        amount,
        interest,
        dueDate: new Date(dueDate).toLocaleDateString()
      });
      displayDebts();

      // Clear inputs
      document.getElementById("debtName").value = "";
      document.getElementById("debtAmount").value = "";
      document.getElementById("debtInterest").value = "";
      document.getElementById("debtDueDate").value = "";
    })
    .catch((err) => console.error('Error:', err));
}

      function loadDebts() {
  fetch('/api/debt')
    .then(res => res.json())
    .then(data => {
      console.log("Fetched debts:", data);
      if (data.success && Array.isArray(data.debts)) {
        debts = data.debts.map(debt => ({
          name: debt.name,
          amount: debt.amount,
          interest: debt.interest,
          dueDate: new Date(debt.due_date).toLocaleDateString()
        }));
        displayDebts();
      } else {
        console.error("Invalid response format or no debts.");
      }
    })
    .catch(err => {
      console.error("Error loading debts:", err);
    });
}

function displayDebts() {
  const debtListDiv = document.getElementById("debtList");
  debtListDiv.innerHTML = "";

  if (debts.length === 0) {
    debtListDiv.innerHTML = "<p>No debts recorded yet.</p>";
    return;
  }

  debts.forEach((debt) => {
    const item = document.createElement("div");
    item.classList.add("debt-item");
    item.innerHTML = `
      <div>
        <p><strong>${debt.name}</strong> - ${formatCurrency(debt.amount)}</p>
        <p>Interest Rate: ${debt.interest}%</p>
        <p>Due Date: ${debt.dueDate ? debt.dueDate : 'N/A'}</p>
      </div>`;
    debtListDiv.appendChild(item);
  });
}
    </script>
  </body>
</html>